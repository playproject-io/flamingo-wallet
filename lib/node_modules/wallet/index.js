
const { exec } = require('child_process');

function runCommand(cmd) {
  return new Promise((resolve, reject) => {
    exec(cmd, { maxBuffer: 10 * 1024 * 1024 }, (err, stdout, stderr) => {
      if (err) return reject(stderr || err.message);
      try {
        resolve(JSON.parse(stdout));
      } catch (e) {
        resolve({ raw: stdout.trim() });
      }
    });
  });
}

//project start commands:
//node server/ws-server.js
//serve ws-test


const api = {
    // Bitcoin
    //start command 'bitcoind -regtest -daemon'
    //end command 'bitcoin-cli -regtest stop'
  async startBitcoin() {
    return runCommand('bitcoind -regtest -daemon');
  },
  async stopBitcoin() {
    return runCommand('bitcoin-cli -regtest stop');
  },
  async getInfoBitcoin() {
    return runCommand('bitcoin-cli -regtest getblockchaininfo');
  },

  async newBitcoinAddress() {
    return runCommand('bitcoin-cli -regtest getnewaddress');
  },

  async sendBitcoin(address, amount) {
    return runCommand(`bitcoin-cli -regtest sendtoaddress ${address} ${amount}`);
  },

  // Lightning
  //start 'lightningd --network=regtest --log-level=debug'
  //end 'lightning-cli --network=regtest stop'
  async startLightning() {
    return runCommand('lightningd --network=regtest --daemon --log-level=debug');
  },
  async stopLightning() {
    return runCommand('pkill -9 lightningd && rm -f ~/.lightning/regtest/lightningd.pid');
  },

  async getInfoLightning() {
    return runCommand('lightning-cli --network=regtest getinfo');
  },

  async newLightningAddress() {
    return runCommand('lightning-cli --network=regtest newaddr');
  },

  async fundLightningNode(address, blocks) {
    return runCommand(`bitcoin-cli -regtest generatetoaddress ${blocks} ${address}`);
  },

  async listLightningFunds() {
    return runCommand('lightning-cli --network=regtest listfunds');
  },

  async fundChannel(peerId, satoshis) {
    return runCommand(`lightning-cli --network=regtest fundchannel ${peerId} ${satoshis}`);
  }
};

module.exports = api;
